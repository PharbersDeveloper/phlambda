<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="../style/histogram.css"/>
    <script src="../dist/app.bundle.js"></script>
</head>

<body>
    <!-- 布局小付同学添加吧 -->
    <div class="histogram-container">
        <div class="histogram-title">
            Hello {{name}}
        </div>
        <div class="histogram-legacy">

        </div>
        <div class="histogram-content" id={{histogramId}} >
        </div>
        <div class="histogram-content" id={{histogramPieId}} >
        </div>
    </div>
    <script type="text/javascript" >

        function createATBarAdapter(ds) {
        	return new ATBarAdapter(ds)
        }

        class ATBarAdapter {
            constructor(ds) {
                this.ds = ds
            }

            apply(key) {
                return this.ds.apply(key)
            }

            max() {
                return d3.max(this.ds.dataset, d => d.v)
            }

            min() {
                return d3.min(this.ds.dataset, d => d.v)
            }

            length() {
                return this.ds.dataset.length
            }

            measure(d) {
                return this.ds.measure(d).v
            }
        }

        function createATLineAdapter(ds) {
            return new ATLineAdapter(ds)
        }

        class ATLineAdapter {
            constructor(ds) {
                this.ds = ds
            }

            apply(key) {
                return this.ds.apply(key)
            }

            max() {
                return [d3.max(this.ds.dataset, d => d.x), d3.max(this.ds.dataset, d => d.v)]
            }

            min() {
                return [d3.min(this.ds.dataset, d => d.x), d3.min(this.ds.dataset, d => d.v)]
            }

            length() {
                return this.ds.dataset.length
            }

            measure(d) {
                return [this.ds.measure(d).x, this.ds.measure(d).y]
            }
        }

        function createATRAdapter(ds) {
            return new ATRAdapter(ds)
        }

        class ATRAdapter {
            constructor(ds) {
                this.ds = ds
            }

            apply(key) {
                return this.ds.apply(key)
            }

            max() {
                return [d3.max(this.ds.dataset, d => d.x),
                    d3.max(this.ds.dataset, d => d.v),
                    d3.max(this.ds.dataset, d => d.r)]
            }

            min() {
                return [d3.min(this.ds.dataset, d => d.x),
                    d3.min(this.ds.dataset, d => d.v),
                    d3.min(this.ds.dataset, d => d.r)]
            }

            length() {
                return this.ds.dataset.length
            }

            measure(d) {
                return [this.ds.measure(d).x,
                    this.ds.measure(d).y,
                    this.ds.measure(d).r]
            }
        }

        function createATPieAdapter(ds) {
            return new ATPieAdapter(ds)
        }

        class ATPieAdapter {
            constructor(ds) {
                this.ds = ds
            }

            apply(key) {
                return this.ds.apply(key)
            }

            max() {
                return d3.max(this.ds.dataset, d => d.v)
            }

            min() {
                return d3.min(this.ds.dataset, d => d.v)
            }

            length() {
                return this.ds.dataset.length
            }

            measure(d) {
                return [this.ds.measure(d).k, this.ds.measure(d).y]
            }
        }

        const data = [
            { k: "a", v: 1, x: 1, y: 1, r: 0.05 },
            { k: "b", v: 2, x: 2, y: 2, r: 0.05 },
            { k: "c", v: 3, x: 3, y: 3, r: 0.05 },
            { k: "d", v: 4, x: 4, y: 4, r: 0.05 },
            { k: "e", v: 5, x: 5, y: 1, r: 0.05 },
        ]

        const hid = {{histogramId}}
        const piehid = {{histogramPieId}}
        const w = {{width}}
        const h = {{height}}
        const histogram = reportFactory.createHistogram(hid, data, createATBarAdapter)
        const barchart = reportFactory.createBarCharts(data, createATBarAdapter)
        const linechart = reportFactory.createLineCharts(data, createATLineAdapter)
        const circlechart = reportFactory.createCircleCharts(data, createATRAdapter)
        histogram.registerCharts(barchart)
        histogram.registerCharts(linechart)
        histogram.registerCharts(circlechart)
        histogram.displayHistogram(w, h)

        const piehistogram = reportFactory.createHistogramWithOutAxis(piehid, data)
        const piechart = reportFactory.createPieCharts(data, createATPieAdapter)
        piehistogram.registerCharts(piechart)
        piehistogram.displayHistogram(w, h)
    </script>
</body>
</html>
