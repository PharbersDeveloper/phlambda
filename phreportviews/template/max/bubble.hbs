<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="../style/max/bubble.css"/>
    <script src="../dist/app.bundle.js"></script>
</head>

<body>
    <!-- 布局小付同学添加吧 -->
    <div class="histogram-container">
        <div class="histogram-title">
        </div>
        <div class="histogram-legacy">

        </div>
        <div class="histogram-content" id={{histogramId}} >
        </div>
        <div class="histogram-content" id={{histogramPieId}} >
        </div>
    </div>
    <script type="text/javascript" >

        function createATBarAdapter(ds) {
        	return new ATBarAdapter(ds)
        }

        class ATBarAdapter {
            constructor(ds) {
                this.ds = ds
            }

            apply(key) {
                return this.ds.apply(key)
            }

            max() {
                return [d3.max(this.ds.dataset, d => d.x), d3.max(this.ds.dataset, d => d.y)]
            }

            min() {
                return [d3.min(this.ds.dataset, d => d.x), d3.min(this.ds.dataset, d => d.y)]
            }

            length() {
                return this.ds.dataset.length
            }

            measure(d) {
                return this.ds.measure(d).v
            }
        }

        function createATLineAdapter(ds) {
            return new ATLineAdapter(ds)
        }

        class ATLineAdapter {
            constructor(ds) {
                this.ds = ds
            }

            apply(key) {
                return this.ds.apply(key)
            }

            max() {
                return [d3.max(this.ds.dataset, d => d.x), d3.max(this.ds.dataset, d => d.v)]
            }

            min() {
                return [d3.min(this.ds.dataset, d => d.x), d3.min(this.ds.dataset, d => d.v)]
            }

            length() {
                return this.ds.dataset.length
            }

            measure(d) {
                return [this.ds.measure(d).x, this.ds.measure(d).y]
            }
        }

        function createATRAdapter(ds) {
            return new ATRAdapter(ds)
        }

        class ATRAdapter {
            constructor(ds) {
                this.ds = ds
            }

            apply(key) {
                return this.ds.apply(key)
            }

            max() {
                return [d3.max(this.ds.dataset, d => d.x),
                    d3.max(this.ds.dataset, d => d.y),
                    d3.max(this.ds.dataset, d => d.r)]
            }

            min() {
                return [d3.min(this.ds.dataset, d => d.x),
                    d3.min(this.ds.dataset, d => d.y),
                    d3.min(this.ds.dataset, d => d.r)]
            }

            length() {
                return this.ds.dataset.length
            }

            measure(d) {
                return [this.ds.measure(d).x,
                    this.ds.measure(d).y,
                    this.ds.measure(d).r]
            }
        }

        function createATPieAdapter(ds) {
            return new ATPieAdapter(ds)
        }

        class ATPieAdapter {
            constructor(ds) {
                this.ds = ds
            }

            apply(key) {
                return this.ds.apply(key)
            }

            max() {
                return d3.max(this.ds.dataset, d => d.v)
            }

            min() {
                return d3.min(this.ds.dataset, d => d.v)
            }

            length() {
                return this.ds.dataset.length
            }

            measure(d) {
                return [this.ds.measure(d).k, this.ds.measure(d).v]
            }
        }

        /**
        y产品市场份额
        x市场增长率
        r市场规模
        EI会决定颜色不同
        */
        const data = [
            { k: "广东", v: 1, x: 1, y: 1.0, r: 10, EI: 120 },
            { k: "上海", v: 2, x: 2, y: 2.0, r: 5, EI: 20 },
            { k: "江西", v: 3, x: 3, y: 3.0, r: 2, EI: 120 },
            { k: "湖北", v: 4, x: 4, y: 1.5, r: 3, EI: 10 },
            { k: "山西", v: 5, x: 5, y: 0.5, r: 6, EI: 20 },
            { k: "河北", v: 1, x: 2, y: 1.0, r: 7, EI: 120 },
            { k: "浙江", v: 2, x: 2, y: 3.0, r: 2, EI: 20 },
            { k: "北京", v: 3, x: 3, y: 1.0, r: 2, EI: 20 },
            { k: "山东", v: 4, x: 4, y: 2.0, r: 3, EI: 120 },
            { k: "内蒙", v: 5, x: 1, y: 2.5, r: 8, EI: 120 },
        ]

        const hid = {{histogramId}}
        const piehid = {{histogramPieId}}
        const w = {{width}}
        const h = {{height}}
        const xt = "产品市场份额"
        const yt = "市场增长率(%)"
        const histogram = maxReportFactory.createBubbleHistogram(hid, data, createATBarAdapter)
        const circlechart = maxReportFactory.createCircleCharts(data, createATRAdapter)
        
        histogram.registerCharts(circlechart)
        histogram.displayHistogram(w, h, xt, yt)
    </script>
</body>
</html>
