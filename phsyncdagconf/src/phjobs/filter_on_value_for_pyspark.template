    #  Filter Start
    filter_parameter = #filter_parameter#
    def filter_replenish_str(value):
        if isinstance(value, str):
            return f"'{value}'"
        return value

    def filter_not_expr(exprs):
        return list(map(lambda expr: f"!{expr}", exprs))

    filter_actions = {
        "REMOVE_ROW": filter_not_expr
    }

    mode = filter_parameter["params"]["booleanMode"]
    action = filter_parameter["params"]["action"]
    values = filter_parameter["params"]["values"]
    columns = filter_parameter["params"]["columns"]
    expr_list = list(map(lambda item:
                        f"""({
                            " OR ".join(list(map(lambda value: f"`{item}` = {filter_replenish_str(value)}", values)))
                        })""", columns))
    function = filter_actions.get(action, None)
    if function is not None:
        expr_list = function(expr_list)
    expr = f" {mode} ".join(expr_list)

    data_frame = data_frame.filter(expr)
    #  Filter End
data_frame



